package cn.domekisuzi.blog.service.impl;

import cn.domekisuzi.blog.model.Task;
import cn.domekisuzi.blog.repository.TaskRepository;
import cn.domekisuzi.utils.TimeUtils;
import lombok.RequiredArgsConstructor;


import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import cn.domekisuzi.blog.repository.ModuleRepository;
import cn.domekisuzi.blog.dto.SubtaskDTO;
import cn.domekisuzi.blog.dto.TaskDTO;
import cn.domekisuzi.blog.model.Subtask;
import cn.domekisuzi.blog.model.Module;
import cn.domekisuzi.blog.service.SubtaskService;
import cn.domekisuzi.blog.service.TaskService;
 

@Service
@RequiredArgsConstructor
public class TaskServiceImpl  implements TaskService {


    private final TaskRepository taskRepository;
    private final ModuleRepository moduleRepository;
    private final SubtaskService subtaskService;

    @Override
    public List<TaskDTO> getAllTasks() {
        List<Task> tasks = taskRepository.findAll();
        return tasks.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    public TaskDTO getTaskById(String id) {
        Task task = taskRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("‰ªªÂä°‰∏çÂ≠òÂú®"));
        return convertToDto(task);
    }

    @Override
    public TaskDTO createTask(TaskDTO dto) {
        
        Task task = convertToEntity(dto);
        task.setId(null); // Á°Æ‰øù ID Áî±Êï∞ÊçÆÂ∫ìÁîüÊàê
        Task saved = taskRepository.save(task);
        return convertToDto(saved);
    }


    @Override
    public TaskDTO updateTask(String id, TaskDTO dto) {
        Task existing = taskRepository.findById( id)
                .orElseThrow(() -> new IllegalArgumentException("‰ªªÂä°‰∏çÂ≠òÂú®"));

        existing.setTitle(dto.getTitle());
        existing.setDescription(dto.getDescription());
        existing.setPriority( dto.getPriority());
        existing.setCompleted(dto.isCompleted());
        existing.setDueDate(LocalDateTime.parse(dto.getDueDate()));
        
        if (dto.getModuleName() != null) {
            Module module = moduleRepository.findByName(dto.getModuleName())
                    .orElseThrow(() -> new IllegalArgumentException("Ê®°Âùó‰∏çÂ≠òÂú®"));
            existing.setModule(module);
        }
 

        if(dto.getSubtasks() != null){
            for (SubtaskDTO subtask : dto.getSubtasks()) {
                subtaskService.updateSubtask(existing.getId(), subtask.getId(), subtask);
            }
        }
        Task updated = taskRepository.save(existing);
        return convertToDto(updated);
    }

    @Override
    public void deleteTask(String id) {
        Task task = taskRepository.findById( id)
                .orElseThrow(() -> new IllegalArgumentException("‰ªªÂä°‰∏çÂ≠òÂú®"));
        taskRepository.delete(task);
    }

    // üîÅ DTO ‚Üí Entity Êò†Â∞ÑÂáΩÊï∞
    private Task convertToEntity(TaskDTO dto) {
        Task task = new Task();
        task.setId( dto.getId() );
        task.setTitle(dto.getTitle());
        task.setDescription(dto.getDescription());
        task.setPriority( dto.getPriority() );
        task.setCompleted(dto.isCompleted());
        if( dto.getDueDate() != null & dto.getDueDate() != "") {   
            task.setDueDate(LocalDateTime.parse(dto.getDueDate()));
        }
        
        task.setCreatedAt(LocalDateTime.parse(dto.getCreatedAt()));
        task.setUpdatedAt(LocalDateTime.parse(dto.getUpdatedAt()));
        
        if (dto.getModuleName() != null) {
            Module module = moduleRepository.findByName(dto.getModuleName())
                    .orElseThrow(() -> new IllegalArgumentException("Ê®°Âùó‰∏çÂ≠òÂú®"));
            task.setModule(module);
        }

        if (dto.getSubtasks() != null) {
            List<Subtask> subtasks = dto.getSubtasks().stream()
                .map(this::convertSubtaskToEntity)
                .collect(Collectors.toList());
            subtasks.forEach(sub -> sub.setTask(task));
            task.setSubtasks(subtasks);
        }

        return task;
    }

    // üîÅ Entity ‚Üí DTO Êò†Â∞ÑÂáΩÊï∞
    private TaskDTO convertToDto(Task task) {
        TaskDTO dto = new TaskDTO();

        dto.setId(task.getId().toString());  // can not set id beacause all id is  generated by springboot,and nothing 
        dto.setTitle(task.getTitle());
        dto.setDescription(task.getDescription());
        dto.setPriority(task.getPriority() );
        dto.setCompleted(task.getCompleted());
        if( task.getDueDate() != null  ){
            dto.setDueDate(task.getDueDate().toString());
        }
        
        dto.setModuleName(task.getModule() != null ? task.getModule().getName() : null);
        dto.setCreatedAt(task.getCreatedAt().toString() );
        dto.setUpdatedAt(task.getUpdatedAt().toString() );
        if (task.getSubtasks() != null) {
            dto.setSubtasks(task.getSubtasks().stream()
                .map(this::convertSubtaskToDto)
                .collect(Collectors.toList()));
        }

        return dto;
    }

    // ‚òëÔ∏è Subtask Êò†Â∞ÑÂáΩÊï∞ÔºàÂèØÊãìÂ±ïÔºâ
    private Subtask convertSubtaskToEntity(SubtaskDTO dto) {
        Subtask sub = new Subtask();
        sub.setId(dto.getId());
        sub.setTitle(dto.getTitle());
        sub.setCompleted(dto.isCompleted());
        // sub.setOtherFields(...) Â¶ÇÊúâÊâ©Â±ï
        return sub;
    }

    private SubtaskDTO convertSubtaskToDto(Subtask sub) {
        SubtaskDTO dto = new SubtaskDTO();
        dto.setId(sub.getId().toString());
        dto.setTitle(sub.getTitle());
        dto.setCompleted(sub.getCompleted());
        return dto;
    }
    
}